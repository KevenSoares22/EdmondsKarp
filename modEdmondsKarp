#include <iostream>
#include <vector>
#include <queue>
#include <climits>

using namespace std;

// Função para realizar BFS e encontrar um caminho aumentante com capacidade pelo menos I
bool bfs(const vector<vector<int>>& residual, vector<int>& parent, int source, int sink, int I) {
    int n = residual.size();
    vector<bool> visited(n, false);
    queue<int> q;

    q.push(source);
    visited[source] = true;
    parent[source] = -1;

    while (!q.empty()) {
        int u = q.front();
        q.pop();

        for (int v = 0; v < n; ++v) {
            if (!visited[v] && residual[u][v] >= I) {
                q.push(v);
                visited[v] = true;
                parent[v] = u;
                if (v == sink) {
                    return true;
                }
            }
        }
    }

    return false;
}

// Função principal do algoritmo MOD_EDMONDS-KARP
int modEdmondsKarp(const vector<vector<int>>& capacity, int source, int sink) {
    int n = capacity.size();
    vector<vector<int>> residual = capacity; // Inicializa a rede residual com as capacidades
    vector<vector<int>> flow(n, vector<int>(n, 0)); // Inicializa o fluxo em todas as arestas como 0

    // Encontrar a capacidade máxima no grafo
    int C = 0;
    for (int u = 0; u < n; ++u) {
        for (int v = 0; v < n; ++v) {
            C = max(C, capacity[u][v]);
        }
    }

    int I = 1;
    while (I <= C) I *= 2;
    I /= 2;

    int maxFlow = 0;

    while (I >= 1) {
        vector<int> parent(n);

        while (bfs(residual, parent, source, sink, I)) {
            int pathFlow = INT_MAX;
            for (int v = sink; v != source; v = parent[v]) {
                int u = parent[v];
                pathFlow = min(pathFlow, residual[u][v]);
            }

            for (int v = sink; v != source; v = parent[v]) {
                int u = parent[v];
                residual[u][v] -= pathFlow;
                residual[v][u] += pathFlow;
                flow[u][v] += pathFlow;
                flow[v][u] -= pathFlow;
            }

            maxFlow += pathFlow;
        }

        I /= 2;
    }

    return maxFlow;
}

int main() {
    
    vector<vector<int>> capacity = {
        {0, 34, 0, 0, 35, 0, 0, 0, 0},  // A
        {34, 0, 0, 20, 8, 0, 0, 0, 0},  // B
        {0, 0, 0, 0, 8, 15, 0, 0, 0},  // C
        {0, 20, 0, 0, 35, 10, 22, 18, 0},  // D
        {35, 8, 8, 35, 0, 15, 0, 0, 0},  // E
        {0, 0, 15, 10, 15, 0, 0, 35, 0},  // F
        {0, 0, 0, 22, 0, 0, 0, 20, 48},  // G
        {0, 0, 0, 18, 0, 35, 20, 0, 30},  // H
        {0, 0, 0, 0, 0, 0, 48, 30, 0}  // I
    };

    int source = 0;  
    int sink = 8;    

    cout << "Fluxo máximo: " << modEdmondsKarp(capacity, source, sink);

    return 0;
}
